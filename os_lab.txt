#!/bin/bash

# 1. Greatest of Three Numbers
greatest_of_three() {
    if [ $# -ne 3 ]; then
        echo "Error: Provide exactly three numbers."
        return 1
    fi
    if [ $1 -ge $2 ] && [ $1 -ge $3 ]; then
        echo "Greatest: $1"
    elif [ $2 -ge $1 ] && [ $2 -ge $3 ]; then
        echo "Greatest: $2"
    else
        echo "Greatest: $3"
    fi
}

# 2. Check Even or Odd
check_even_odd() {
    read -p "Enter a number: " num
    if ! [[ $num =~ ^-?[0-9]+$ ]]; then
        echo "Error: Input must be an integer."
        return 1
    fi
    [ $((num % 2)) -eq 0 ] && echo "Even" || echo "Odd"
}

# 3. Average of n Numbers
average_of_numbers() {
    read -p "Enter numbers separated by spaces: " -a nums
    if [ ${#nums[@]} -eq 0 ]; then
        echo "Error: No numbers provided."
        return 1
    fi
    sum=0
    for num in "${nums[@]}"; do
        if ! [[ $num =~ ^-?[0-9]+$ ]]; then
            echo "Error: All inputs must be integers."
            return 1
        fi
        sum=$((sum + num))
    done
    avg=$(echo "scale=2; $sum / ${#nums[@]}" | bc)
    echo "Average: $avg"
}

# 4. Check Prime Number
is_prime() {
    read -p "Enter a number: " num
    if ! [[ $num =~ ^-?[0-9]+$ ]]; then
        echo "Error: Input must be a positive integer."
        return 1
    fi
    if [ $num -le 1 ]; then
        echo "Not Prime"
        return 0
    fi
    for ((i = 2; i * i <= num; i++)); do
        if [ $((num % i)) -eq 0 ]; then
            echo "Not Prime"
            return 0
        fi
    done
    echo "Prime"
}

# 5. Check Input Type
check_input_type() {
    read -p "Enter input: " input
    [[ $input =~ ^[0-9]+$ ]] && echo "Number" || echo "String"
}

# 6. Count Characters and Words per Line
count_chars_words() {
    if [ $# -ne 1 ]; then
        echo "Error: Provide a valid filename."
        return 1
    fi
    if [ ! -f "$1" ]; then
        echo "Error: File not found."
        return 1
    fi
    while IFS= read -r line; do
        chars=${#line}
        words=$(echo "$line" | wc -w)
        echo "Line: '$line' | Characters: $chars | Words: $words"
    done < "$1"
}

# 7. Fibonacci Series
fibonacci() {
    read -p "Enter number of terms: " n
    if ! [[ $n =~ ^[0-9]+$ ]] || [ $n -le 0 ]; then
        echo "Error: Input must be a positive integer."
        return 1
    fi
    a=0; b=1
    for ((i = 0; i < n; i++)); do
        echo -n "$a "
        temp=$((a + b))
        a=$b
        b=$temp
    done
    echo
}

# 8. Factorial of a Number
factorial() {
    read -p "Enter a number: " num
    if ! [[ $num =~ ^[0-9]+$ ]] || [ $num -lt 0 ]; then
        echo "Error: Input must be a non-negative integer."
        return 1
    fi
    fact=1
    for ((i = 2; i <= num; i++)); do
        fact=$((fact * i))
    done
    echo "Factorial: $fact"
}

# 9. Sum of Digits
sum_of_digits() {
    read -p "Enter a number: " num
    if ! [[ $num =~ ^-?[0-9]+$ ]]; then
        echo "Error: Input must be an integer."
        return 1
    fi
    sum=0
    while [ $num -gt 0 ]; do
        digit=$((num % 10))
        sum=$((sum + digit))
        num=$((num / 10))
    done
    echo "Sum of digits: $sum"
}

# 10. Check Palindrome
check_palindrome() {
    read -p "Enter a string: " str
    if [ -z "$str" ]; then
        echo "Error: String cannot be empty."
        return 1
    fi
    len=${#str}
    for ((i = 0; i < len / 2; i++)); do
        if [ "${str:i:1}" != "${str:len-i-1:1}" ]; then
            echo "Not Palindrome"
            return
        fi
    done
    echo "Palindrome"
}

# 11. Validate String Length
validate_length() {
    read -p "Enter a string: " str
    if [ ${#str} -lt 5 ]; then
        echo "Error: String must have at least 5 characters."
        return 1
    fi
    echo "Valid string"
}

# 12. String Length Using Loop
string_length() {
    if [ $# -ne 1 ]; then
        echo "Error: Provide a string as an argument."
        return 1
    fi
    str="$1"
    len=0
    for ((i = 0; i < ${#str}; i++)); do
        ((len++))
    done
    echo "Length: $len"
}

# 13. Delete Matching Files
delete_matching_files() {
    if [ $# -ne 2 ]; then
        echo "Error: Provide two directory names."
        return 1
    fi
    for file in "$1"/*; do
        base=$(basename "$file")
        if [ -f "$2/$base" ] && cmp -s "$file" "$2/$base"; then
            rm "$file"
        fi
    done
}

# 14. Display Processes
display_processes() {
    for i in {1..3}; do
        ps
        sleep 30
    done
}

# 15. File Modification Time
file_mod_time() {
    if [ ! -f "$1" ]; then
        echo "Error: File not found."
        return 1
    fi
    stat -c '%y' "$1"
}

# 16. Spell Check
spell_check() {
    if [ $# -ne 1 ]; then
        echo "Error: Provide a valid filename."
        return 1
    fi
    aspell list < "$1"
}

# 17. Encrypt Text File with OpenSSL
encrypt_text_file() {
    if [ $# -ne 1 ]; then
        echo "Error: Provide a filename to encrypt."
        return 1
    fi

    input_file="$1"
    if [ ! -f "$input_file" ]; then
        echo "Error: File '$input_file' not found."
        return 1
    fi

    output_file="${input_file}.enc"
    read -sp "Enter a password for encryption: " password
    echo

    openssl enc -aes-256-cbc -salt -in "$input_file" -out "$output_file" -k "$password" 2>/dev/null

    if [ $? -eq 0 ]; then
        echo "File encrypted successfully: $output_file"
    else
        echo "Error: Encryption failed."
    fi
}


# 18. Extract Wordlist
extract_wordlist() {
    if [ $# -ne 1 ]; then
        echo "Error: Provide a valid filename."
        return 1
    fi
    grep -o -w '\w\+' "$1" | sort | uniq > wordlist.txt
    echo "Wordlist saved to wordlist.txt"
}

# 19. Remove Blank Spaces
remove_spaces() {
    if [ $# -ne 1 ]; then
        echo "Error: Provide a valid filename."
        return 1
    fi
    tr -d ' ' < "$1" > output.txt
    echo "Output saved to output.txt"
}

# 20. Rename Files to Lowercase
rename_to_lowercase() {
    for file in "$@"; do
        if [ -f "$file" ]; then
            mv "$file" "$(echo "$file" | tr 'A-Z' 'a-z')"
        else
            echo "Error: File $file not found."
        fi
    done
}

# 21. Translate Text to Lowercase
translate_to_lowercase() {
    if [ $# -ne 1 ]; then
        echo "Error: Provide a valid filename."
        return 1
    fi
    tr 'A-Z' 'a-z' < "$1" > output.txt
    echo "Output saved to output.txt"
}

# 22. Combine Files and Count Words
combine_and_count() {
    if [ $# -ne 3 ]; then
        echo "Error: Provide exactly three filenames."
        return 1
    fi
    cat "$1" "$2" "$3" > combined.txt
    wc -w combined.txt
}

# 23. Separate Even and Odd Lines
separate_lines() {
    if [ $# -ne 1 ]; then
        echo "Error: Provide a valid filename."
        return 1
    fi
    awk 'NR%2==0 {print > "evenfile"} NR%2==1 {print > "oddfile"}' "$1"
    echo "Even lines saved to evenfile, odd lines saved to oddfile."
}

# 24. Delete Even Lines
delete_even_lines() {
    if [ $# -ne 1 ]; then
        echo "Error: Provide a valid filename."
        return 1
    fi
    sed -i 'n;d' "$1"
}

# 25. System Info
system_info() {
    echo "Username: $USER"
    echo "Date and Time: $(date)"
    echo "Logged Users:"
    who
    echo "*********"
}
